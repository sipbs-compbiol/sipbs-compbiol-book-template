[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "THE TITLE OF THE BOOK",
    "section": "",
    "text": "Preface\nThis is a Quarto book, generated using the sipbs-compbiol-book-template GitHub template.\nThe index.qmd file provides this Preface page, which is intended as a frontispiece with brief introductory information about the book and its contents and scope and, maybe, its authors. To change the main text and content you see here (the content in the middle section of the page), you need to edit the index.qmd file.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#how-this-page-is-structured",
    "href": "index.html#how-this-page-is-structured",
    "title": "THE TITLE OF THE BOOK",
    "section": "How this page is structured",
    "text": "How this page is structured\n\nSection headers\nSection headers are written in [Markdown] using hash/pound signs:\n## This is a (level two) section header.\n### This is a (level three) section header\n\nTo learn more about sections and headers, see this quick guide to Markdown basics.\n\n\n\n\n\n\n\nChanging title and author information, or the cover image (click to expand)\n\n\n\n\n\nThe book title, author, date, and cover image are specified in the _quarto.yml. To change this information, edit that file, and re-render the page.\nbook:\n  title: \"THE TITLE OF THE BOOK\"\n  author: \"AUTHOR NAME\"\n  date: \"DD/MM/YY\"\n  cover-image: sipbs_compbio_800.png\n\n\n\n\n\nCallout blocks\nCallout blocks, like the ones above, are highlighted regions of the document which carry a title, icon and colour, which may indicate the kind of information the callout contains. For example:\n\n\n\n\n\n\nWarning\n\n\n\nThis is a warning block. To insert a block like this, use:\n::: { .callout-warning }\nThe text of the callout goes here\n:::\n\n\n\n\n\n\n\n\nCaution (click to expand)\n\n\n\n\n\nThis is a caution block, which is collapsible when rendered as HTML/webpage but appears in full in the Word document. To make a callout collapsible, use collapse=\"true\" as in the example below. This places a dropdown icon to the right of the title bar, which controls expansion.\n::: { .callout-caution collapse=\"true\" title=\"Caution (click to expand)\"}\nThis is a collapsible caution block. The callout content goes here.\n:::\nNotice also that the title of the callout is specified between the curly braces as title=\"Caution (click to expand)\".\n\n\n\nYou can learn more about callout blocks in the Quarto documentation.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "The Introduction page is intended as a short introduction to the book.\nLike most Quarto books, this is a book created from markdown and executable code.\nThis kind of book is an example of literate programming - the intertwining of nicely-formatted text and images, and executable code. For example, the R code cell below executes and produces output when the book is compiled:\n\n1 + 1\n\n[1] 2\n\n\nBut the R code cell below does not:\n\nsummary(cars)\n\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "early-section.html",
    "href": "early-section.html",
    "title": "Introduction",
    "section": "",
    "text": "Tip\n\n\n\nThis .qmd file introduces a Part of the Quarto book. We use the {#sec-REFERENCE} option to make it cross-referenceable elsewhere in the text, and the {.unnumbered} option to avoid giving it a section number.\n\n\nThis section of the template contains pages that provide an introduction to using this template for your own documents.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "tutorial.html",
    "href": "tutorial.html",
    "title": "2  Getting started",
    "section": "",
    "text": "Step 1: Create a new GitHub repository from the template.\nThe basic steps we cover below are:",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "tutorial.html#step-1-create-a-new-github-repository-from-the-template.",
    "href": "tutorial.html#step-1-create-a-new-github-repository-from-the-template.",
    "title": "2  Getting started",
    "section": "",
    "text": "Navigate to this template’s repository at GitHub using your web browser.\nClick on the green Use This Template button at the top right of the sipbs-compbiol-book-template GitHub page (Figure 2.1).\n\n\n\n\n\n\n\nWarning\n\n\n\nYou will only see this button if you are signed into your own GitHub account.\nIf you do not already have a GitHub account, the GitHub documentation can walk you through the process of obtaining one, and logging in.\n\n\n\n\n\n\n\n\nFigure 2.1: Video demonstration of using this template to create a new GitHub repository.\n\n\n\n\nA drop-down menu will appear. Click on the Create a new repository option. This will bring you to a page (Figure 2.1) for you to provide details about the new repository you want to create.\n\n\n\n\n\n\n\nTip\n\n\n\n\nGive your repository a unique, memorable, descriptive name. This will make it easier to find and help users understand what the repository is for.\nAdd a brief description, explaining the purpose of your new repository. This will help users understand what the repository is for.\nLeave Include all branches unchecked.\nMake sure the repository status is set to Public.\n\n\n\n\nWhen you are satisfied that the details for creating your new repository are correct, click the green Create repository button (Figure 2.1).",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "tutorial.html#step-2-clone-the-new-repository-to-your-personal-machine",
    "href": "tutorial.html#step-2-clone-the-new-repository-to-your-personal-machine",
    "title": "2  Getting started",
    "section": "Step 2: Clone the new repository to your personal machine",
    "text": "Step 2: Clone the new repository to your personal machine\nYou will be editing your online material on your own machine, and pushing the repository to GitHub for version control and to create and update the webpage where people will read your material. You need to clone your new repository to your machine, so that you can work on it. The first part of this process is to copy the URL that will let you clone the repository.\n\n\n\n\n\n\nNote\n\n\n\nThere are several equally valid methods for cloning a repository to your own computer. Covering all of these is beyond the scope of this tutorial, so we only present one method here. Any approach that works is fine.\n\n\n\nClick on the green Code button on your GitHub repository. This will reveal a drop-down box with a number of tabs and options (Figure 2.2)\nWith the SSH tab selected, click on the Copy URL to clipboard button.\n\n\n\n\n\n\n\nFigure 2.2: Video demonstration: copying the URL for your repository so it can be cloned to your local computer.\n\n\n\n\nAt the command-line/terminal, type the command git clone and paste the repository URL that you copied to clipboard from your new repository (Figure 2.2).",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "tutorial.html#step-3-set-up-the-local-repository-to-render-to-github-pages",
    "href": "tutorial.html#step-3-set-up-the-local-repository-to-render-to-github-pages",
    "title": "2  Getting started",
    "section": "Step 3: Set up the local repository to render to GitHub Pages",
    "text": "Step 3: Set up the local repository to render to GitHub Pages\n\nIn the terminal, change directory to your new repository (e.g. if your new repository is called my-new-repo, use cd my-new-repo as in Figure 2.3).\nRun the command quarto publish gh-pages. You will be asked whether you want to publish the site to GitHub. Press the Y key to accept.\n\n\n\n\n\n\n\nFigure 2.3: Video demonstration of cloning the repository to your local computer, and configuring it to render the document at GitHub Pages.\n\n\n\nAfter a short pause, your browser should automatically open your new site pages at GitHub. You will be able to navigate around the material just like a normal webpage (Figure 2.4).\n\n\n\n\n\n\nFigure 2.4: Video demonstration of the published web materials.\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nYou should not need to modify any further settings for changes that you now push to your GitHub repository to be made live at your repository’s website.\n\nThe quarto publish gh-pages command automatically created a gh-pages branch at GitHub, and placed a rendered version of your new repository website in it (Figure 2.5).\nYour repository is automatically set to use this gh-pages branch of your repository to host its webpages (Figure 2.5).\nThe template includes a GitHub Action that will automatically rebuild your Quarto site when any changes are pushed to the main repository. Once pushed, the changes will go live following a short delay to build the pages.\n\n\n\n\n\n\n\nFigure 2.5: Video demonstration of the repository configuration.",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "tutorial.html#step-4-edit-your-local-repository-in-rstudio-and-push-changes-to-github-pages",
    "href": "tutorial.html#step-4-edit-your-local-repository-in-rstudio-and-push-changes-to-github-pages",
    "title": "2  Getting started",
    "section": "Step 4: Edit your local repository (in RStudio) and push changes to GitHub Pages",
    "text": "Step 4: Edit your local repository (in RStudio) and push changes to GitHub Pages\nYou can now edit your online materials in the repository using RStudio in the usual way. When you are ready to make changes to the public site showing the materials, you only need to commit your changes and push them to the repository. The rest is handled automatically. The process is demonstrated in Figure 2.6, and the main actions are:\n\nOpen your repository in RStudio\nMake an edit to any file that displays part of the materials online (e.g. index.qmd)\nCommit your changes in the git tab of the RStudio window\nPush your changes to the GitHub repository (and wait for the site to build)\nCheck the repository and GitHub Pages site to confirm the changes are live\n\n\n\n\n\n\n\nFigure 2.6: Video demonstration of the process of updating the public site by editing a file and pushing changes to the repository.\n\n\n\n\nOpen the template/R project using RStudio (e.g. double-click on the .Rproj file as in Figure 2.6).\nMake the desired edits to any files (e.g. modify the index.qmd file as in Figure 2.6).\nSave your changes locally.\nSelect the changed files in the git tab of RStudio and click the Commit icon. A new window will appear.\nIn the new window, enter a short commit string, and click the Commit button. The commit string will disappear. This commits your changes to the local repository.\nClick on the Push icon (the up arrow) to push your changes to the GitHub repository. A short message will appear, confirming that the files have transferred.\nTo confirm the changes were pushed to the GitHub repository, you can visit the repository site and check the individual file contents.\nTo confirm that the website is being updated, you can click on the Actions link at the top of the repository page. This will summarise recent GitHub Actions and will tell you if your site has been built, is in the process of being built, or if an error occurred.\nOnce the site has been built by the GitHub Action, you will be able to visit the public GitHub Pages site for this repository, and inspect the changes, as in Figure 2.6.",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "example_pages.html",
    "href": "example_pages.html",
    "title": "Example pages",
    "section": "",
    "text": "Tip\n\n\n\nThis .qmd file introduces a Part of the Quarto book. We use the {#sec-REFERENCE} option to make it cross-referenceable elsewhere in the text, and the {.unnumbered} option to avoid giving it a section number, using this line at the top of the file:\n# Example pages {#sec-late .unnumbered}\n\n\nThis section of the template contains pages that each focus on an example of one type of helpful feature, embedding videos, presenting multiple choice questions (MCQs), custom callout boxes, and that kind of thing. They are intended to present the features in-use, and to provide a brief reference for how to employ them in your own books.",
    "crumbs": [
      "Example pages"
    ]
  },
  {
    "objectID": "quiz.html",
    "href": "quiz.html",
    "title": "3  Interactive Multiple Choice Questions",
    "section": "",
    "text": "3.1 Multiple Choice Questions\nThis page demonstrates the setup of an naquiz multiple-choice quiz. The advantage of this extension is that we don’t need to use a Shiny server.",
    "crumbs": [
      "Example pages",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Interactive Multiple Choice Questions</span>"
    ]
  },
  {
    "objectID": "quiz.html#multiple-choice-questions",
    "href": "quiz.html#multiple-choice-questions",
    "title": "3  Interactive Multiple Choice Questions",
    "section": "",
    "text": "3.1.1 Basic MCQ\nA simple naquiz example looks something like the question below to the reader (click the Markdown tab to see how to write the markdown for it).\n\nAppearanceMarkdown\n\n\n\nBill Gates was the founder of:\n\n\n\n\n ✗Apple\n\n\n ✓Microsoft\n\n\n ✗Facebook\n\n\n ✗Google\n\n\n\n\n\n\n\n:::::{.question}\nBill Gates was the founder of:\n\n::::{.choices}\n\n:::{.choice}\nApple\n:::  \n\n:::{.choice .correct-choice}\nMicrosoft\n:::\n\n:::{.choice}\nFacebook  \n:::\n\n:::{.choice}\nGoogle   \n:::\n\n::::\n:::::\n\n\n\n\n\n\nCaution\n\n\n\nThe nested colon dividers and their counts can look confusing on the page, and missed/extra colons can break the layout of your page.\n\nThe {.question} divider gets five colons.\nThe {.choices} divider that surrounds the choices presented to the reader gets four colons.\nEach individual {.choice} divider gets three colons.\n\n\n\n\n\n\nIt presents a series of radio buttons from which the reader can choose one option. On clicking the option, the reader receives very basic feedback: a red cross (incorrect) or green tick (correct).\n\n\n3.1.2 Add a “clear answer” button\nThe naquiz MCQs can be decorated with useful buttons for reader interaction. The example below has a “Clear Answer” button, which unchecks the reader’s selected answer.\n\nAppearanceMarkdown\n\n\n\nBill Gates was the founder of:\n\n\n\n\n ✗Apple\n\n\n ✓Microsoft\n\n\n ✗Facebook\n\n\n ✗Google\n\n\nClear answer\n\n\n\n\n\n\n\n\n\n\n:::::{.question}\nBill Gates was the founder of:\n\n::::{.choices}\n\n:::{.choice}\nApple\n:::  \n\n:::{.choice .correct-choice}\nMicrosoft\n:::\n\n:::{.choice}\nFacebook  \n:::\n\n:::{.choice}\nGoogle   \n:::\n\n:::{.button-clear title=\"Clear answer\" button-class=\"btn btn-xs\"}\n:::\n\n::::\n:::::\n\n\n\n\n\n\nImportant\n\n\n\nThe button to clear reader answers needs to be linked with the available choices, and so is placed inside the {.choices} division of the MCQ.\n\n\n\n\n\n\n\n3.1.3 Add a “hint” button\nThe example below includes a “hint” button, which the reader can use to get a clue to the answer.\n\nAppearanceMarkdown\n\n\n\nBill Gates was the founder of:\n\n\n\n\n ✗Apple\n\n\n ✓Microsoft\n\n\n ✗Facebook\n\n\n ✗Google\n\n\nClear answer\n\n\n\n\n\n\n\n\n\n\nShow hint\n\nThe company name starts with an ‘M’…\n\n\n\n\n\n\n\n\n:::::{.question}\nBill Gates was the founder of:\n\n::::{.choices}\n\n:::{.choice}\nApple\n:::  \n\n:::{.choice .correct-choice}\nMicrosoft\n:::\n\n:::{.choice}\nFacebook  \n:::\n\n:::{.choice}\nGoogle   \n:::\n\n:::{.button-clear title=\"Clear answer\" button-class=\"btn btn-xs\"}\n:::\n\n::::\n\n::::{.btn-group}\n:::{.button-hint title=\"Show hint\" button-class=\"btn btn-xs\"}\nThe company name starts with an 'M'...\n:::\n::::\n\n:::::\n\n\n\n\n\n\nImportant\n\n\n\nWe can place additional buttons within a button group divider, specified as ::::{.btn-group}, inside the question divider (the five colons :::::).\nHere, we have linked a {.button-hint} that, when clicked, expands to show the hint text.\n\n\n\n\n\n\n\n3.1.4 Add an “answer” button\nWe can add a further button to provide students with the answer we’d like them to read, directly.\n\nAppearanceMarkdown\n\n\n\nBill Gates was the founder of:\n\n\n\n\n ✗Apple\n\n\n ✓Microsoft\n\n\n ✗Facebook\n\n\n ✗Google\n\n\nClear answer\n\n\n\n\n\n\n\n\n\n\nShow hint\n\nThe company name starts with an ‘M’…\n\n\n\n\n\n\nShow Answer\n\nBill Gates and Paul Allen founded Microsoft on April 4, 1975.\n\n\n\n\n\n\n\n\n:::::{.question}\nBill Gates was the founder of:\n\n::::{.choices}\n\n:::{.choice}\nApple\n:::  \n\n:::{.choice .correct-choice}\nMicrosoft\n:::\n\n:::{.choice}\nFacebook  \n:::\n\n:::{.choice}\nGoogle   \n:::\n\n:::{.button-clear title=\"Clear answer\" button-class=\"btn btn-xs\"}\n:::\n\n::::\n\n::::{.btn-group}\n:::{.button-hint title=\"Show hint\" button-class=\"btn btn-xs\"}\nThe company name starts with an 'M'...\n:::\n::::\n\n:::{.button-answer title=\"Show Answer\" button-class=\"btn btn-xs\"}\nBill Gates and Paul Allen founded Microsoft on April 4, 1975.\n:::\n:::::\n\n\n\n\n\n\nImportant\n\n\n\nWe can place more than one button in the button group divider. Here, we have linked a {.button-answer} that, when clicked, expands to show the hint text.\n\n\n\n\n\n\n\n3.1.5 Placing an MCQ in a custom callout\nWe have created a custom callout called callout-question which can be used to make MCQ stand out a bit more, with a consistent visual style.\n\nAppearanceMarkdown\n\n\n\n\n\n\n\n\nQuestion\n\n\n\n\nBill Gates was the founder of:\n\n\n\n\n ✗Apple\n\n\n ✓Microsoft\n\n\n ✗Facebook\n\n\n ✗Google\n\n\nClear answer\n\n\n\n\n\n\n\n\n\n\n\nShow hint\n\nThe company name starts with an ‘M’…\n\n\n\n\n\n\nShow Answer\n\nBill Gates and Paul Allen founded Microsoft on April 4, 1975.\n\n\n\n\n\n\n\n\n\n::: { .callout-question }\n\n:::::{.question}\nBill Gates was the founder of:\n\n::::{.choices}\n\n:::{.choice}\nApple\n:::  \n\n:::{.choice .correct-choice}\nMicrosoft\n:::\n\n:::{.choice}\nFacebook  \n:::\n\n:::{.choice}\nGoogle   \n:::\n\n:::{.button-clear title=\"Clear answer\" button-class=\"btn btn-xs\"}\n:::\n\n::::\n:::::\n\n::::{.btn-group}\n:::{.button-hint title=\"Show hint\" button-class=\"btn btn-xs\"}\nThe company name starts with an 'M'...\n:::\n\n:::{.button-answer title=\"Show Answer\" button-class=\"btn btn-xs\"}\nBill Gates and Paul Allen founded Microsoft on April 4, 1975.\n:::\n::::\n\n:::\n\n\n\n\n\n3.1.6 Randomising question values\nWe can use R or Python to generate random values that can be used to compose questions that are different each time the page is rendered, by inserting a suitable R/Python code block and using the values in the question.\n\n\n\n\n\n\nCaution\n\n\n\nThe values do not change when the page is reloaded by a reader. The values are calculated when the pages are rendered.\nFor values that change when the page is refreshed, or on demand, use an R Shiny or Shinylive solution, or a solution like Numbas.\n\n\n\nAppearanceMarkdownR code\n\n\n\n\n\n\n\n\nQuestion\n\n\n\n\nWhat is the sum of 5 and 15?\n\n\n\n\n ✗-10\n\n\n ✓20\n\n\n ✗10\n\n\n ✗75\n\n\nClear answer\n\n\n\n\n\n\n\n\n\n\n\nShow hint\n\nYou need to add the two numbers 5 and 15\n\n\n\n\n\n\nShow Answer\n\n5 + 15 = 20\n\n\n\n\n\n\n\n\n\n::: { .callout-question }\n\n:::::{.question}\nWhat is the sum of `r x_val` and `r y_val`?\n\n::::{.choices}\n\n:::{.choice}\n`r x_val - y_val`\n:::  \n\n:::{.choice .correct-choice}\n`r x_val + y_val`\n:::\n\n:::{.choice}\n`r y_val - x_val`\n:::\n\n:::{.choice}\n`r y_val * x_val`\n:::\n\n:::{.button-clear title=\"Clear answer\" button-class=\"btn btn-xs\"}\n:::\n\n::::\n:::::\n\n::::{.btn-group}\n:::{.button-hint title=\"Show hint\" button-class=\"btn btn-xs\"}\nYou need to add the two numbers `r x_val` and `r y_val`\n:::\n\n:::{.button-answer title=\"Show Answer\" button-class=\"btn btn-xs\"}\n`r x_val` + `r y_val` = `r x_val + y_val`\n:::\n::::\n\n:::\n\n\n#| show: false\n#| echo: false\n\nx_val &lt;- sample(1:10, 1)\ny_val &lt;- sample(11:20, 1)",
    "crumbs": [
      "Example pages",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Interactive Multiple Choice Questions</span>"
    ]
  },
  {
    "objectID": "webr-example.html",
    "href": "webr-example.html",
    "title": "4  WebR Playground",
    "section": "",
    "text": "4.1 Introduction\nThis page provides a WebR cell for use as a playground to experiment with example datasets, and describes how to include WebR on other Quarto pages.",
    "crumbs": [
      "Example pages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>`WebR` Playground</span>"
    ]
  },
  {
    "objectID": "webr-example.html#introduction",
    "href": "webr-example.html#introduction",
    "title": "4  WebR Playground",
    "section": "",
    "text": "WebR documentation",
    "crumbs": [
      "Example pages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>`WebR` Playground</span>"
    ]
  },
  {
    "objectID": "webr-example.html#playground",
    "href": "webr-example.html#playground",
    "title": "4  WebR Playground",
    "section": "4.2 Playground",
    "text": "4.2 Playground\n\nAppearanceMarkdown\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n# Use this WebR cell to experiment with using R. You can do almost anything\n# by typing in this code cell that you can do in R, including plotting graphs.\n#\n# Why not try the command:\n#\n# plot(penguins)\n#\n# and click the \"Run code\" icon?\n\n```",
    "crumbs": [
      "Example pages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>`WebR` Playground</span>"
    ]
  },
  {
    "objectID": "webr-example.html#examples-to-try",
    "href": "webr-example.html#examples-to-try",
    "title": "4  WebR Playground",
    "section": "4.3 Examples to try",
    "text": "4.3 Examples to try\n\nPalmer PenguinsPlot reporter curvesOther datasets\n\n\nThe penguins dataset contains data about three different species of penguins. You can use the R commands below to investigate the data:\nglimpse(penguins)  # look at the format of the dataset\nplot(penguins)     # plot a visual overview of the dataset\n\n# Plot the count of penguins in each species as a bar chart\nggplot(penguins, aes(species, fill=species)) + geom_bar()\n\n# Break down the distribution by species in a facet plot\nggplot(penguins, aes(species, fill=species)) + geom_bar() + facet_wrap(~sex)\n\n# Make a box and whisker plot of penguin body mass by species:\nggplot(penguins, aes(x=species, y=body_mass_g, fill=species)) + geom_boxplot()\n\n# Plot the body mass for each sex side-by-side\nggplot(penguins, aes(x=species, y=body_mass_g, fill=sex)) + geom_boxplot()\n\n# Investigate correlation between body mass and flipper length:\nggplot(penguins, aes(x=body_mass_g, y=flipper_length_mm)) + geom_point()\n\n# Colour datapoints by species:\nggplot(penguins, aes(x=body_mass_g, y=flipper_length_mm, colour=species)) +\n         geom_point()\n\n# Fit a linear regression to each species separately:\nggplot(penguins, aes(x=body_mass_g, y=flipper_length_mm, colour=species)) +\n         geom_point() +\n         geom_smooth(method=\"lm\")\n\n\nOne of our BM214 workshops involves a WebR-supported interactive exercise involving simulated reporter curves.\nHere, we have downloaded some data from the online repository and made it available as though it was a dataset on the filesystem, reporter_curves.csv.\n# Load reporter experiment data\ndata &lt;- read.csv(\"reporter_curves.csv\")\n\nglimpse(data)  # Summarise the data format\n\n# Plot absorbance against concentration as a facet plot\nggplot(data, aes(x=conc, y=abs_ratio, color=sample)) + geom_point() +\n  geom_line() + facet_wrap(~sample)\n\n\nR comes with a number of example datasets you can practice with, including:\n\nmtcars: fuel consumption and other statistic for 32 automobiles\nTitanic: the fates of passengers from the maiden voyage of the ocean liner Titanic\n\nYou can see a full list by running the command\nlibrary(help = \"datasets\")",
    "crumbs": [
      "Example pages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>`WebR` Playground</span>"
    ]
  },
  {
    "objectID": "webr-example.html#setting-up-webr",
    "href": "webr-example.html#setting-up-webr",
    "title": "4  WebR Playground",
    "section": "4.4 Setting up WebR",
    "text": "4.4 Setting up WebR\nThere are three important elements to including WebR on a Quarto page: the YAML header, the setup code block, and the WebR cell.\nYou can see an example of how to set up WebR on any Quarto page by inspecting the .qmd source for this page.\n\n4.4.1 YAML header\nTo use WebR on a Quarto page, you need to include an appropriate YAML header at the top of the page:\n---\nwebr:\n  packages: [\"tidyverse\", \"palmerpenguins\"]\nfilters:\n  - webr\n---\nPackages to be imported into WebR should be specified in the list, as tidyverse and palmerpenguins are, here. The webr filter must be loaded.\n\n\n4.4.2 WebR setup block\nThere is a special R code block needed to prepare the WebR instance. For this page, the code block\n```{webr-r}\n#| context: setup\n\n# Download reporter data\ndownload.file('https://raw.githubusercontent.com/sipbs-compbiol/BM214-Workshop-3/main/assets/data/reporter_curves.csv', 'reporter_curves.csv')\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n```\ndeclares that it has the setup context, so will be run when the WebR instance starts. The download.file() call pulls the reporter_curves.csv file from a GitHub repository and makes it available in WebR, as if it were a real file, with the name reporter_curves.csv. The last three lines import R packages into the WebR environment.\n\n\n4.4.3 The WebR code cell\nThe minimal WebR code cell looks like this:\n```{webr-r}\n```\nbut it is more helpful, and more usual, to include some example code or comments, as in the example below:\n\nAppearanceMarkdown\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n# You can use `R` as a calculator\n\n1 * sin(1)\n```",
    "crumbs": [
      "Example pages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>`WebR` Playground</span>"
    ]
  },
  {
    "objectID": "callouts.html",
    "href": "callouts.html",
    "title": "5  Custom Callouts",
    "section": "",
    "text": "5.1 Introduction\nThis page demonstrates the use of the quarto-custom-callout extension to provide bespoke callout blocks.\nQuarto provides a number of built-in callout blocks, including:\nbut these do not cover all the cases we might want to use callouts for. It is possible to change the titles of these callouts, such as:\nbut customising the colour and icon of a callout is more difficult. The quarto-custom-callout extension allows us to make our own callouts.",
    "crumbs": [
      "Example pages",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Custom Callouts</span>"
    ]
  },
  {
    "objectID": "callouts.html#introduction",
    "href": "callouts.html#introduction",
    "title": "5  Custom Callouts",
    "section": "",
    "text": "Caution\n\n\n\nThe caution callout\n::: { .callout-caution }\nThe caution callout\n:::\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThe important callout\n::: { .callout-info }\nThe important callout\n:::\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe tip callout\n::: { .callout-tip }\nThe tip callout\n:::\n\n\n\n\n\n\n\n\n\nCustom title\n\n\n\nThe tip callout with a custom title\n::: { .callout-tip title=\"Custom title\"}\nThe tip callout with a custom title\n:::\n\n\n\n\n\n\n\n\nNot the caution callout\n\n\n\n::: { .callout-caution }\n## Not the caution callout\n:::",
    "crumbs": [
      "Example pages",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Custom Callouts</span>"
    ]
  },
  {
    "objectID": "callouts.html#defining-a-new-callout",
    "href": "callouts.html#defining-a-new-callout",
    "title": "5  Custom Callouts",
    "section": "5.2 Defining a new callout",
    "text": "5.2 Defining a new callout\nTo make a new callout, add a new entry in _quarto.yml in the custom-callout block with the name of the callout. For instance, to add a new case study callout, we could use the code below:\ncustom-callout:\n  callout-case-study:\n    title: \"Case Study\"\n    icon-symbol: \"🔍\"\n    color: \"#FFA500\"\nand ensure that the custom-callout filter is called in _quarto.yml:\nfilters:\n  - custom-callout\n\n\n\n\n\n\nCallout naming convention\n\n\n\nWe have chosen to give all of our callouts for this template the prefix callout- for continuity with the builtin callouts, and to aid with literate programming/self-documentation. Please keep to this convention when you define your own callouts.\n\n\n\n\n\n\n\n\nTip\n\n\n\nNotice that the icon-symbol field accepts unicode icons and emojis.",
    "crumbs": [
      "Example pages",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Custom Callouts</span>"
    ]
  },
  {
    "objectID": "callouts.html#custom-callouts-in-this-template",
    "href": "callouts.html#custom-callouts-in-this-template",
    "title": "5  Custom Callouts",
    "section": "5.3 Custom callouts in this template",
    "text": "5.3 Custom callouts in this template\nWe have defined the custom callouts below:\n\n\n\n\n\n\nCase Study\n\n\n\nFor describing case studies\n::: { .callout-case-study }\nFor describing case studies\n:::\n\n\n\n\n\n\n\n\nChallenge\n\n\n\nFor presenting a challenge to readers\n::: { .callout-challenge }\nFor presenting a challenge to readers\n:::\n\n\n\n\n\n\n\n\nData Analysis\n\n\n\nFor describing datasets and data analysis\n::: { .callout-data }\nFor describing datasets and data analysis\n:::\n\n\n\n\n\n\n\n\nDiscussion Questions:\n\n\n\nFor introducing discussion points\n::: { .callout-discussion }\nFor introducing discussion points\n:::\n\n\n\n\n\n\n\n\nMicrobe Profile\n\n\n\nFor summarising the properties of a microbe\n::: { .callout-microbe }\nFor summarising the properties of a microbe\n:::\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nFor presenting a single question to readers\n::: { .callout-question }\nFor presenting a single question to readers\n:::\n\n\n\n\n\n\n\n\nQuestions\n\n\n\nFor presenting multiple questions to readers\n::: { .callout-questions }\nFor presenting multiple questions to readers\n:::\n\n\n\n\n\n\n\n\nGreat job!\n\n\n\nFor general encouragement\n::: { .callout-thumbs-up }\nFor general encouragement\n:::\n\n\n\n\n\n\n\n\nCallout-todo\n\n\n\nFor highlighting where we still need to do some work\n::: { .callout-todo }\nFor highlighting where we still need to do some work\n:::",
    "crumbs": [
      "Example pages",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Custom Callouts</span>"
    ]
  },
  {
    "objectID": "embedpdf.html",
    "href": "embedpdf.html",
    "title": "6  Embedding PDF files",
    "section": "",
    "text": "6.1 Native embedding\nThere are two ways to embed PDF files in a Quarto page: by using native Quarto support, or with the embedpdf extension.\nPDF files can be embedded in Quarto using the standard link syntax:",
    "crumbs": [
      "Example pages",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Embedding PDF files</span>"
    ]
  },
  {
    "objectID": "embedpdf.html#native-embedding",
    "href": "embedpdf.html#native-embedding",
    "title": "6  Embedding PDF files",
    "section": "",
    "text": "![An example PDF document](example.pdf)\n\nAppearanceCode\n\n\n\n\n\nKiepas et al. (2024)\n\n\n\n\n![Kiepas _et al._ (2024)](assets/papers/kiepas_et_al_2024.pdf)\n\n\n\n\n6.1.1 Controlling embedded document size\nTo set the height and width of the presentation of the embedded document, use brace notation:\n![An example PDF document](example.pdf){width=80% height=300px}\n\nAppearanceCode\n\n\n\n\n\nKiepas et al. (2024)\n\n\n\n\n![Kiepas _et al._ (2024)](assets/papers/kiepas_et_al_2024.pdf){width=100% height=300px}",
    "crumbs": [
      "Example pages",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Embedding PDF files</span>"
    ]
  },
  {
    "objectID": "embedpdf.html#embedpdf",
    "href": "embedpdf.html#embedpdf",
    "title": "6  Embedding PDF files",
    "section": "6.2 embedpdf",
    "text": "6.2 embedpdf\nembedpdf is a Quarto extension that enables embedding of PDF files directly into Quarto HTML files. The extension is included as part of this template.\n\nembedpdf repository\nembedpdf examples and documentation\n\nWith embedpdf, files are embedded using shortcodes, e.g.:\n{{&lt; pdf example.pdf &gt;}}\n\nAppearanceCode\n\n\nDownload PDF file.\n\n\n{{&lt; pdf assets/papers/kiepas_et_al_2024.pdf &gt;}}\n\n\n\n\n6.2.1 Controlling embedded document size\nTo set the height and width of the presentation of the embedded document, add these variables to the shortcode:\n{{&lt; pdf example.pdf height=200px width=80%&gt;}}\n\nAppearanceCode\n\n\nDownload PDF file.\n\n\n{{&lt; pdf assets/papers/kiepas_et_al_2024.pdf height=300px width=100% &gt;}}\n\n\n\n\n\n6.2.2 Installing embedpdf\nThe extension is packaged as part of this template, but if you do need to install embedpdf in other Quarto projects, use the command:\nquarto add jmgirard/embedpdf",
    "crumbs": [
      "Example pages",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Embedding PDF files</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  }
]